{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.js"],"names":[],"mappings":";;AAEA,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC7B,MAAM,eAAe,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC;AACrD,MAAM,gBAAgB,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;AACvD,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC7B,MAAM,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;AACrD,MAAM,EAAE,OAAO,EAAE,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAE5C,MAAM,OAAO,GAAG;IACd;QACE,IAAI,EAAE,QAAQ;QACd,KAAK,EAAE,GAAG;QACV,IAAI,EAAE,MAAM;QACZ,WAAW,EAAE,oCAAoC;QACjD,aAAa,EAAE,IAAI;KACpB;IACD;QACE,IAAI,EAAE,OAAO;QACb,KAAK,EAAE,GAAG;QACV,IAAI,EAAE,OAAO;QACb,WAAW,EAAE,6CAA6C;QAC1D,aAAa,EAAE,KAAK;KACrB;IACD;QACE,IAAI,EAAE,MAAM;QACZ,KAAK,EAAE,GAAG;QACV,IAAI,EAAE,OAAO;QACb,WAAW,EAAE,qBAAqB;KACnC;CACF,CAAC;AAEF,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,eAAe,CAAC,OAAO,CAAC,CAAC;AAEzD,SAAS,UAAU;IACjB,MAAM,QAAQ,GAAG;QACf;YACE,MAAM,EAAE,aAAa;YACrB,OAAO,EAAE,8CAA8C;SACxD;QACD;YACE,MAAM,EAAE,SAAS;YACjB,UAAU,EAAE,OAAO;SACpB;KACF,CAAC;IACF,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC1C,CAAC;AAED,IAAI,IAAI,EAAE;IACR,UAAU,EAAE,CAAC;IACb,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;CACjB;AAED,IAAI,CAAC,MAAM,IAAI,CAAC,KAAK,EAAE;IACrB,OAAO,CAAC,KAAK,CAAC,6CAA6C,CAAC,CAAC;IAC7D,UAAU,EAAE,CAAC;IACb,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;CAClB;AAED,IAAI,MAAM,IAAI,KAAK,EAAE;IACnB,OAAO,CAAC,KAAK,CAAC,8CAA8C,CAAC,CAAC;IAC9D,UAAU,EAAE,CAAC;IACb,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;CAClB;AAED,IAAI,KAAK,EAAE;IACT,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;IACxC,OAAO,EAAE,CAAC;CACX;KAAM;IACL,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE;QAC1B,KAAK;aACF,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;aACpD,OAAO,CAAC,IAAI,CAAC,EAAE;YACd,UAAU,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;gBAC7B,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBACrB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YACnB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;CACJ","sourcesContent":["#!/usr/bin/env node\n\nconst path = require('path');\nconst commandLineArgs = require('command-line-args');\nconst commandLineUsage = require('command-line-usage');\nconst glob = require('glob');\nconst { sassRender } = require('./sass-renderer.js');\nconst { watcher } = require('./watcher.js');\n\nconst options = [\n  {\n    name: 'source',\n    alias: 's',\n    type: String,\n    description: 'Template file to render sass into.',\n    defaultOption: true\n  },\n  {\n    name: 'watch',\n    alias: 'w',\n    type: Boolean,\n    description: 'Wether or not running theLCI in watch mode.',\n    defaultOption: false\n  },\n  {\n    name: 'help',\n    alias: 'h',\n    type: Boolean,\n    description: 'Print this message.'\n  }\n];\n\nconst { source, watch, help } = commandLineArgs(options);\n\nfunction printUsage() {\n  const sections = [\n    {\n      header: 'sass-render',\n      content: 'Render sass into css tagged template literal'\n    },\n    {\n      header: 'Options',\n      optionList: options\n    }\n  ];\n  console.log(commandLineUsage(sections));\n}\n\nif (help) {\n  printUsage();\n  process.exit(0);\n}\n\nif (!source && !watch) {\n  console.error('Must provide a source if not in watch mode!');\n  printUsage();\n  process.exit(-1);\n}\n\nif (source && watch) {\n  console.error('In watch mode no source should be specified.');\n  printUsage();\n  process.exit(-1);\n}\n\nif (watch) {\n  console.log('Running in watch mode ! ');\n  watcher();\n} else {\n  glob(source, (err, files) => {\n    files\n      .filter(file => !path.basename(file).startsWith('_'))\n      .forEach(file => {\n        sassRender(file).catch(error => {\n          console.error(error);\n          process.exit(-1);\n        });\n      });\n  });\n}\n\n"]}