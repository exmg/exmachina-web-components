{"version":3,"file":"sass-renderer.js","sourceRoot":"","sources":["../src/sass-renderer.js"],"names":[],"mappings":";AAAA,MAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACzB,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC7B,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAE7B,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC7B,MAAM,cAAc,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC;AAEnD,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC/C,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;AAC7C,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;AAE/C,MAAM,SAAS,GAAG,mBAAmB,CAAC;AAEtC,KAAK,UAAU,SAAS,CAAC,QAAQ;IAC/B,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC;QAC9B,IAAI,EAAE,QAAQ;QACd,QAAQ,EAAE,cAAc;QACxB,WAAW,EAAE,YAAY;KAC1B,CAAC,CAAC;IACH,OAAO,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;AAC/B,CAAC;AAED,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,sBAAsB,CAAC,CAAC;AAElE,KAAK,UAAU,UAAU,CAAC,UAAU;IAClC,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC;IACvC,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;IACvD,MAAM,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACvC,IAAI,CAAC,KAAK,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,iBAAiB,YAAY,sCAAsC,CAAC,CAAC;KACtF;IACD,OAAO,CAAC,GAAG,CAAC,cAAc,UAAU,EAAE,CAAC,CAAC;IACxC,MAAM,WAAW,GAAG,MAAM,SAAS,CAAC,UAAU,CAAC,CAAC;IAChD,MAAM,UAAU,GAAG,QAAQ,CAAC,OAAO,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;IAC5D,MAAM,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;IACxF,OAAO,SAAS,CAAC,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;AACpD,CAAC;AAED,OAAO,CAAC,UAAU,GAAG,UAAU,CAAC","sourcesContent":["const fs = require('fs');\nconst path = require('path');\nconst util = require('util');\n\nconst sass = require('sass');\nconst nodeSassImport = require('node-sass-import');\n\nconst renderSass = util.promisify(sass.render);\nconst readFile = util.promisify(fs.readFile);\nconst writeFile = util.promisify(fs.writeFile);\n\nconst delimiter = /<%\\s*content\\s*%>/;\n\nasync function sassToCss(sassFile) {\n  const result = await renderSass({\n    file: sassFile,\n    importer: nodeSassImport,\n    outputStyle: 'compressed'\n  });\n  return result.css.toString();\n}\n\nconst templateFile = path.join(__dirname, './sass-template.tmpl');\n\nasync function sassRender(sourceFile) {\n  console.log('Source file', sourceFile);\n  const template = await readFile(templateFile, 'utf-8');\n  const match = delimiter.exec(template);\n  if (!match) {\n    throw new Error(`Template file ${templateFile} did not contain template delimiters`);\n  }\n  console.log(`Processing ${sourceFile}`);\n  const replacement = await sassToCss(sourceFile);\n  const newContent = template.replace(delimiter, replacement);\n  const outputFile = sourceFile.replace('.scss', '-css.ts').replace('scss', 'src/styles');\n  return writeFile(outputFile, newContent, 'utf-8');\n}\n\nexports.sassRender = sassRender;\n"]}